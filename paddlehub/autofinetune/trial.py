# coding:utf-8
# Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json

from env_vars import trial_env_vars
from . import platform

__all__ = [
    'get_next_parameter', 'get_current_parameter', 'report_intermediate_result',
    'report_final_result', 'get_experiment_id', 'get_trial_id',
    'get_sequence_id'
]

_params = None
_experiment_id = platform.get_experiment_id()
_trial_id = platform.get_trial_id()
_sequence_id = platform.get_sequence_id()


def get_next_parameter():
    """Returns a set of (hyper-)paremeters generated by Tuner.
    Returns None if no more (hyper-)parameters can be generated by Tuner."""
    global _params
    _params = platform.get_next_parameter()
    if _params is None:
        return None
    return _params['parameters']


def get_current_parameter(tag=None):
    global _params
    if _params is None:
        return None
    if tag is None:
        return _params['parameters']
    return _params['parameters'][tag]


def get_experiment_id():
    return _experiment_id


def get_trial_id():
    return _trial_id


def get_sequence_id():
    return _sequence_id


_intermediate_seq = 0


def report_intermediate_result(metric):
    """Reports intermediate result to Assessor.
    metric: serializable object.
    """
    global _intermediate_seq
    assert _params is not None, 'nni.get_next_parameter() needs to be called before report_intermediate_result'
    metric = json.dumps({
        'parameter_id': _params['parameter_id'],
        'trial_job_id': trial_env_vars.NNI_TRIAL_JOB_ID,
        'type': 'PERIODICAL',
        'sequence': _intermediate_seq,
        'value': metric
    })
    _intermediate_seq += 1
    platform.send_metric(metric)


def report_final_result(metric):
    """Reports final result to tuner.
    metric: serializable object.
    """
    assert _params is not None, 'hub.get_next_parameter() needs to be called before report_final_result'
    metric = json.dumps({
        'parameter_id': _params['parameter_id'],
        'trial_job_id': trial_env_vars.NNI_TRIAL_JOB_ID,
        'type': 'FINAL',
        'sequence': 0,  # TODO: may be unnecessary
        'value': metric
    })
    platform.send_metric(metric)
